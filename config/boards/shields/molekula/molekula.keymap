/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include "36keys.h"

#define BASE 0
#define EU 1
#define NAV 2
#define NUM 3
#define FUNC 4
#define SYS 5

#include "combos.dtsi"  // requires layer aliases

#define KEYS_L LT0 LT1 LT2 LT3 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

// reuse basic mod-morph scheme

#define ZMK_BEHAVIOR_CORE_mod_morph       compatible = "zmk,behavior-mod-morph";       #binding-cells = <0>
#define ZMK_BEHAVIOR(name, type, ...) \
    / { \
        behaviors { \
            name: name { \
                ZMK_BEHAVIOR_CORE_ ## type; \
                __VA_ARGS__ \
            }; \
        }; \
    };
#define ZMK_MOD_MORPH(name, ...) ZMK_BEHAVIOR(name, mod_morph, __VA_ARGS__)
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// // tap: left/right parenthesis | shft + tap: less-than/greater-than
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <160>;
    quick-tap-ms = <175>;
};

&mt {  // mod-tap config
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&encoder {
    status = "okay";
};

/ {
    behaviors {
        // hsl: homerow_shift_l {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     tapping-term-ms = <140>;
        //     quick-tap-ms = <0>;
        //     require-prior-idle-ms = <30>;
        //     flavor = "tap-preferred";
        //     bindings = <&kp>, <&kp>;
        // };
        // hsr: homerow_shift_r {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     tapping-term-ms = <140>;
        //     quick-tap-ms = <0>;
        //     require-prior-idle-ms = <30>;
        //     flavor = "tap-preferred";
        //     bindings = <&kp>, <&kp>;
        // };
        hcl: homerow_ctrl_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <30>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hcr: homerow_ctrl_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <30>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        hml: homerow_mods_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: homerow_mods_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };

    macros {
        m_email: m_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp Z  &kp E &kp N &kp E &kp G &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
        };

        m_arrow: m_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };

        m_sl: m_select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp HOME> 
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp END>
                , <&macro_release &kp LSHFT>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <12 15>;
            bindings = <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BASE";

            bindings = <
                                        &kp W        &kp E         &kp R         &kp T            &kp Y      &kp U         &kp I         &kp O
                &kp Q      &hml LGUI A  &hml LALT S  &hcl LCTRL D  &hml LSHFT F  &kp G            &kp H      &hmr RSHFT J  &hcr RCTRL K  &hmr LALT L  &hmr RGUI P  &kp SQT
                           &kp Z        &kp X        &kp C         &kp V         &kp B            &kp N      &kp M         &comma_morph  &dot_morph    &qexcl
                                                  &kp ENTER  &lt NUM SPACE  &lt FUNC TAB        &sk LSHFT  &lt NAV BSPC  &lt EU DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        eu_layer {
            display-name = "EU";

            bindings = <
                                       &trans      &kp RA(E)    &trans       &trans            &trans       &kp RA(U)    &trans      &kp RA(O)
                &trans    &kp RA(A)    &kp RA(S)   &trans       &kp LSHFT    &trans            &trans       &kp RSHFT    &trans      &kp RA(L)    &trans       &trans
                          &kp RA(Z)    &kp RA(X)   &kp RA(C)    &trans       &trans            &kp RA(N)    &trans       &trans      &trans       &trans
                                                           &trans   &trans     &trans       &trans      &mo SYS     &trans
            >;
        };

        nav_layer {
            display-name = "NAV";

            bindings = <
                                   &kp LC(Z)  &kp LC(Y)    &kp LC(GRAVE)  &none          &none         &kp INS    &kp PG_DN    &kp PG_UP
                &none    &kp LGUI  &kp LALT   &kp LCTRL    &kp LSHFT      &none          &kp LA(UP)    &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT    &none
                         &none     &none      &kp LS(END)  &kp LS(HOME)   &none          &kp LA(DOWN)  &kp HOME   &kp END      &none        &none
                                                      &trans     &trans     &trans        &trans      &trans     &trans
            >;
        };

        num_layer {
            display-name = "NUM";

            bindings = <
                                       &kp N7      &kp N8      &kp N9      &kp COMMA          &none     &kp HASH    &kp DLLR    &kp PRCNT
                &kp MINUS   &kp N0     &kp N4      &kp N5      &kp N6      &kp DOT            &none     &kp TILDE    &kp STAR    &kp PIPE    &kp AMPS     &none
                            &none      &kp N1      &kp N2      &kp N3      &kp BSPC           &none     &m_arrow     &m_sl       &m_email      &none
                                                         &trans     &trans     &trans       &trans      &trans     &trans
            >;
        };

        // sym_layer {
        //     display-name = "SYM";

        //     bindings = <
        //                              &kp PRCNT   &kp PLUS    &kp LBRC    &none           &none    &kp RBRC    &kp AT      &kp DLLR
        //         &none    &kp BSLH    &kp EXCL    &kp EQUAL   &kp LPAR    &none           &none    &kp RPAR    &kp PIPE    &kp AMPS     &kp HASH    &none
        //                  &none       &none       &kp STAR    &kp LBKT    &kp DEL         &none    &kp RBKT    &kp CARET   &none        &none
        //                                              &trans     &trans     &trans       &trans      &trans     &mo SYS
        //     >;
        // };

        func_layer {
            display-name = "FUNC";

            bindings = <
                                     &kp F7      &kp F8      &kp F9      &kp F11             &none        &kp PSCRN    &kp SLCK     &kp PAUSE_BREAK
                &none    &kp LCTRL   &kp F4      &kp F5      &kp F6      &kp F12             &none        &kp RSHFT    &kp RCTRL    &kp LALT         &kp RGUI    &none
                         &none       &kp F1      &kp F2      &kp F3      &kp F10             &none        &kp CAPS     &kp KP_NUM   &none            &none
                                                  &kp C_NEXT     &kp C_PP    &trans        &trans      &trans     &trans
            >;
        };

        sys_layer {
            display-name = "SYS";

            bindings = <
                                    &none     &none     &none     &none           &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
                &none     &none     &none     &none     &none     &none           &ext_power EP_ON   &out OUT_BLE  &none         &none         &none          &bt BT_CLR
                          &none     &none     &none     &none     &none           &ext_power EP_OFF  &out OUT_USB  &none         &none         &none
                                                &none     &none     &none       &bootloader     &trans      &trans
            >;
        };

    };
};